package router

import (
	"github.com/gin-gonic/gin"
	"github.com/hdu-dp/backend/internal/handlers"
	adminHandlers "github.com/hdu-dp/backend/internal/handlers/admin"
	"github.com/hdu-dp/backend/internal/middleware"

	_ "github.com/hdu-dp/backend/docs" // docs is generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// Params groups dependencies required for routing.
type Params struct {
	Engine            *gin.Engine
	AuthMiddleware    *middleware.AuthMiddleware
	AuthHandler       *handlers.AuthHandler
	UserHandler       *handlers.UserHandler
	ReviewHandler     *handlers.ReviewHandler
	StoreHandler      *handlers.StoreHandler
	AdminHandler      *adminHandlers.ReviewAdminHandler
	StoreAdminHandler *adminHandlers.StoreAdminHandler
	StaticUploadDir   string
}

// Register configures API routes on the provided engine.
func Register(p Params) {
	p.Engine.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	api := p.Engine.Group("/api/v1")

	auth := api.Group("/auth")
	{
		auth.POST("/register", p.AuthHandler.Register)
		auth.POST("/login", p.AuthHandler.Login)
		auth.POST("/refresh", p.AuthHandler.Refresh)
		auth.POST("/logout", p.AuthHandler.Logout)
	}

	if p.StaticUploadDir != "" {
		api.Static("/uploads", p.StaticUploadDir)
	}

	// --- Public Routes ---
	api.GET("/reviews", p.ReviewHandler.ListPublic)
	api.GET("/reviews/:id", p.AuthMiddleware.OptionalAuth(), p.ReviewHandler.Detail)
	api.GET("/stores", p.StoreHandler.SearchStores)
	api.GET("/stores/:id", p.StoreHandler.GetStore)
	api.GET("/stores/:id/reviews", p.StoreHandler.GetStoreReviews)

	// --- Protected Routes ---
	protected := api.Group("")
	protected.Use(p.AuthMiddleware.RequireAuth())
	{
		// User
		protected.GET("/users/me", p.UserHandler.Me)
		protected.GET("/reviews/me", p.ReviewHandler.MyReviews)

		// Store
		protected.POST("/stores", p.StoreHandler.CreateStore)

		// Review
		protected.POST("/stores/:id/reviews", p.StoreHandler.CreateReview)
		protected.PUT("/stores/:id/reviews/:reviewId", p.StoreHandler.UpdateReview)
		protected.DELETE("/stores/:id/reviews/:reviewId", p.StoreHandler.DeleteReview)
		protected.POST("/reviews/:id/images", p.ReviewHandler.UploadImage)
	}

	// 管理员接口
	admin := api.Group("/admin")
	admin.Use(p.AuthMiddleware.RequireAuth(), p.AuthMiddleware.RequireRoles("admin"))
	{
		// 评价管理
		admin.GET("/reviews/pending", p.AdminHandler.Pending)
		admin.PUT("/reviews/:id/approve", p.AdminHandler.Approve)
		admin.PUT("/reviews/:id/reject", p.AdminHandler.Reject)
		admin.DELETE("/reviews/:id", p.AdminHandler.Delete)

		// 店铺管理
		admin.GET("/stores/pending", p.StoreAdminHandler.Pending)
		admin.POST("/stores", p.StoreAdminHandler.CreateStore)
		admin.PUT("/stores/:id/approve", p.StoreAdminHandler.Approve)
		admin.PUT("/stores/:id/reject", p.StoreAdminHandler.Reject)
		admin.DELETE("/stores/:id", p.StoreAdminHandler.Delete)
	}
}
